#!/usr/bin/env node
"use strict";

//module dependencies
var server = require("../dist/server");
var debug = require("debug")("express:server");
//var http = require("http");
var createServer = require("auto-sni");
var cors = require('cors')


var httpPort = normalizePort(process.env.PORT || 80);
var app = server.Server.bootstrap().app;
var port = 443


var httpServer = createServer({
  email: "sjyeo88@gmail.com", // Emailed when certificates expire.
  agreeTos: true, // Required for letsencrypt.
  debug: true, // Add console messages and uses staging LetsEncrypt server. (Disable in production)
  domains: ["restapi-test.xyz"], // List of accepted domain names. (You can use nested arrays to register bundles with LE).
  //dir: "/etc/letsencrypt/live/restapi-test.xyz", // Directory for storing certificates. Defaults to "~/letsencrypt/etc" if not present.
  dir: "/etc/letsencrypt", // Directory for storing certificates. Defaults to "~/letsencrypt/etc" if not present.
  ports: {
    http: 80, // Optionally override the default http port.
    https: 443 // // Optionally override the default https port.
  }
}, app);


//listen on provided ports
//httpServer.listen(httpPort);
httpServer.listen(port);

//add error handler
httpServer.on("error", onError);

//start listening on port
httpServer.on("listening", onListening);
/**
* Normalize a port into a number, string, or false.
*/
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string"
    ? "Pipe " + port
    : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = httpServer.address();
  var bind = typeof addr === "string"
    ? "pipe " + addr
    : "port " + addr.port;
  debug("Listening on " + bind);
}
